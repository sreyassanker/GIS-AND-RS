var roi = ee.FeatureCollection('projects/gee-trial2/assets/Shapfile/WMH_Distric')
    .filter(ee.Filter.eq('dt_code', 526));
Map.centerObject(roi);

//--------time-------------------------------------------------------
var time_start = '2015-01-01';
var time_end = '2023-12-31';

//-----------ee.imageCollection for MODIS LST-----------------------
var modisLST = ee.ImageCollection("MODIS/061/MOD11A2") // MOD11A2 provides 8-day LST composites
  .select('LST_Day_1km')
  .filterDate(time_start, time_end)
  .filterBounds(roi)
  .map(function(img) {
    return img.multiply(0.02)  // Scale factor for LST
      .subtract(273.15)  // Convert from Kelvin to Celsius
      .copyProperties(img, img.propertyNames());
  });

//----------------------------------------------------
// Temporal aggregation (adjust for 16-day intervals)
function temporal_collection(collection, start, count, interval, unit) {
  var seq = ee.List.sequence(0, ee.Number(count).subtract(1));
  var origin_date = ee.Date(start);
  return ee.ImageCollection(seq.map(function(i) {
    var start_date = origin_date.advance(ee.Number(interval).multiply(i), unit);
    var end_date = start_date.advance(interval, unit);
    return collection.filterDate(start_date, end_date).mean()
      .set('system:time_start', start_date.millis())
      .set('system:time_end', end_date.millis());
  }));
}

// Adjusting count for 16-day intervals
var totalIntervals = ee.Date(time_end).difference(ee.Date(time_start), 'day').divide(16).round();
var lstCollection = temporal_collection(modisLST, time_start, totalIntervals, 16, 'day');

// Calculate TCI
var lst_min = lstCollection.reduce(ee.Reducer.min());
var lst_max = lstCollection.reduce(ee.Reducer.max());

var tciCollection = lstCollection.map(function(img) {
  var tci = img.expression('((max - lst) / (max - min)) * 100', {
    'lst': img,
    'min': lst_min,
    'max': lst_max
  }).rename('TCI');
  return tci.copyProperties(img, img.propertyNames());
});

// Plotting TCI time series
print(ui.Chart.image.series(tciCollection, roi, ee.Reducer.mean(), 500, 'system:time_start')
  .setOptions({
    title: 'TCI Time Series',
    vAxis: { title: 'TCI (%)' },
    hAxis: { title: 'Date' }
  }));

// Optional: Export TCI Collection
Export.table.toDrive({
  collection: tciCollection.map(function(img) {
    return img.reduceRegions({
      collection: roi,
      reducer: ee.Reducer.mean(),
      scale: 1000
    }).map(function(f) {
      return f.set('time', img.get('system:time_start'));
    });
  }).flatten(),
  description: 'TCI_TimeSeries',
  fileFormat: 'CSV'
});

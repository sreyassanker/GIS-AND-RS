// Load the AOI from asset
var aoi = ee.FeatureCollection('projects/gee-trial2/assets/Shapfile/WMH_Distric');
Map.centerObject(aoi, 10);

// Load Sentinel-2 imagery
var sentinel2 = ee.ImageCollection('COPERNICUS/S2')
                  .filterBounds(aoi)
                  .filterDate('2023-01-01', '2023-12-31')
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20)) // Filter low cloud cover
                  .select(['B8', 'B4']); // Selecting NIR (B8) and RED (B4)

// Function to compute RVI (NIR/RED)
var computeRVI = function(image) {
  var nir = image.select('B8');
  var red = image.select('B4');
  var rvi = nir.divide(red).rename('RVI'); // RVI = NIR / RED
  return image.addBands(rvi);
};

// Apply the function to compute RVI
var sentinel2WithRVI = sentinel2.map(computeRVI);

// Compute median RVI and clip to AOI
var clippedRVI = sentinel2WithRVI.median().clip(aoi);

// Add RVI layer to the map
var visParams = {min: 0, max: 10, palette: ['blue', 'green', 'yellow', 'red']};
Map.addLayer(clippedRVI.select('RVI'), visParams, 'RVI');

// Generate time series chart of RVI
var chart = ui.Chart.image.series({
  imageCollection: sentinel2WithRVI.select('RVI'),
  region: aoi,
  reducer: ee.Reducer.mean(),
  scale: 10,
  xProperty: 'system:time_start'
}).setOptions({
  title: 'Time Series of RVI (NIR/RED)',
  hAxis: {title: 'Date'},
  vAxis: {title: 'RVI'},
  lineWidth: 2,
  pointSize: 4
});

// Print the chart
print(chart);

// Compute statistical information (mean, min, max)
var stats = clippedRVI.reduceRegion({
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.minMax(),
    sharedInputs: true
  }),
  geometry: aoi,
  scale: 10,
  bestEffort: true
});

// Print statistics
print('RVI Statistics:', stats);

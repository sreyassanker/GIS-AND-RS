// Load MODIS LST data instead of NDVI
var col = ee.ImageCollection('MODIS/006/MOD11A2')
                                  .select('LST_Day_1km'); // Select daytime LST band
                                  
// Define a mask to clip the LST data by.
// Define clipping and region boundary geometries
var mask = ee.FeatureCollection('projects/gee-trial2/assets/IND_Shapefiles/IND');
Map.centerObject(mask, 7);

// Define the regional bounds of animation frames.
var region = ee.Geometry.Polygon(
  [[[68.0, 37.0],  // Top-left corner (northwest)
    [68.0, 6.0],   // Bottom-left corner (southwest)
    [97.5, 6.0],   // Bottom-right corner (southeast)
    [97.5, 37.0]]], // Top-right corner (northeast)
  null, false
);

// Group images by composite date
col = col.map(function(img) {
  var doy = ee.Date(img.get('system:time_start')).getRelative('day', 'year');
  return img.set('doy', doy);
});

// Filter for a specific year
var distinctDOY = col.filterDate('2022-01-01', '2023-01-01');

// Define a filter that identifies which images from the complete collection
// match the DOY from the distinct DOY collection.
var filter = ee.Filter.equals({leftField: 'doy', rightField: 'doy'});
var join = ee.Join.saveAll('doy_matches');

// Apply the join and convert the resulting FeatureCollection to an
// ImageCollection.
var joinCol = ee.ImageCollection(join.apply(distinctDOY, col, filter));

// Reduce composite groups
// Apply median reduction among matching DOY collections.
var comp = joinCol.map(function(img) {
  var doyCol = ee.ImageCollection.fromImages(
    img.get('doy_matches')
  );
  return doyCol.reduce(ee.Reducer.median());
});

// Make visualization images
// Define visualization parameters for LST.
var visParams = {
  min: 13000, // Adjust to LST range in Kelvin
  max: 16500, // Adjust to LST range in Kelvin
  palette: [
    '040274', '0504FF', '0D76FF', '15B2FF', '2BD4F4', '4BF2DD', '72FFAF',
    'A0FD6A', 'CBFD3E', 'EBFD1E', 'FDCE00', 'FD9A00', 'FD6104', 'FD1804',
    'D70404'
  ],
};

// Create visualization images for use as animation frames.
var rgbVis = comp.map(function(img) {
  return img.visualize(visParams).clip(mask);
});

// Create an animated GIF
// Define GIF visualization parameters.
var gifParams = {
  'region': region,
  'dimensions': 600,
  'crs': 'EPSG:3857',
  'framesPerSecond': 10
};

// Print the GIF URL to the console.
print(rgbVis.getVideoThumbURL(gifParams));

// Render the GIF animation in the console.
print(ui.Thumbnail(rgbVis, gifParams));
